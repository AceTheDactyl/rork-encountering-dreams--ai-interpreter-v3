import { useNeuralSigilStore } from '@/store/neuralSigilStore';\nimport { useDreamStore } from '@/store/dreamStore';\n\n/**\n * Initialize the neural sigil system and rebuild mappings\n * Call this on app startup to ensure everything is properly connected\n */\nexport async function initializeNeuralSystem() {\n  try {\n    console.log('Initializing neural sigil system...');\n    \n    // Initialize neural sigil store\n    const neuralSigilStore = useNeuralSigilStore.getState();\n    await neuralSigilStore.initializeNeuralSystem();\n    \n    // Initialize dream store and rebuild sigil mappings\n    const dreamStore = useDreamStore.getState();\n    await dreamStore.loadDreams();\n    dreamStore.rebuildSigilMapping();\n    \n    console.log('Neural sigil system initialized successfully');\n    \n    // Generate sigils for dreams that don't have them\n    const { dreams } = dreamStore;\n    const dreamsWithoutSigils = dreams.filter(dream => !dream.neuralSigil && !dream.sigilId);\n    \n    if (dreamsWithoutSigils.length > 0) {\n      console.log(`Generating sigils for ${dreamsWithoutSigils.length} dreams...`);\n      \n      for (const dream of dreamsWithoutSigils.slice(0, 10)) { // Limit to 10 to avoid overwhelming\n        try {\n          await dreamStore.generateDreamSigil(dream.id);\n          console.log(`Generated sigil for dream: ${dream.title || dream.name}`);\n        } catch (error) {\n          console.warn(`Failed to generate sigil for dream ${dream.id}:`, error);\n        }\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to initialize neural system:', error);\n    return false;\n  }\n}\n\n/**\n * Check if the neural system is properly initialized\n */\nexport function isNeuralSystemReady(): boolean {\n  try {\n    const neuralSigilStore = useNeuralSigilStore.getState();\n    const dreamStore = useDreamStore.getState();\n    \n    return (\n      neuralSigilStore.sigilGenerator !== null &&\n      dreamStore.dreams.length >= 0 && // Dreams can be empty, that's fine\n      dreamStore.sigilToDreamId instanceof Map\n    );\n  } catch (error) {\n    console.error('Error checking neural system readiness:', error);\n    return false;\n  }\n}\n\n/**\n * Get neural system status for debugging\n */\nexport function getNeuralSystemStatus() {\n  try {\n    const neuralSigilStore = useNeuralSigilStore.getState();\n    const dreamStore = useDreamStore.getState();\n    \n    return {\n      neuralSigils: neuralSigilStore.neuralSigils.length,\n      dreams: dreamStore.dreams.length,\n      dreamsWithSigils: dreamStore.dreams.filter(d => d.neuralSigil || d.sigilId).length,\n      sigilMappings: dreamStore.sigilToDreamId.size,\n      patternMatches: neuralSigilStore.patternMatches.length,\n      sigilBraids: neuralSigilStore.sigilBraids.length,\n      isGeneratorReady: neuralSigilStore.sigilGenerator !== null,\n      isNeuralGeneratorReady: neuralSigilStore.neuralSigilGenerator !== null,\n      isPatternRecognizerReady: neuralSigilStore.patternRecognizer !== null\n    };\n  } catch (error) {\n    console.error('Error getting neural system status:', error);\n    return {\n      error: error.message,\n      neuralSigils: 0,\n      dreams: 0,\n      dreamsWithSigils: 0,\n      sigilMappings: 0,\n      patternMatches: 0,\n      sigilBraids: 0,\n      isGeneratorReady: false,\n      isNeuralGeneratorReady: false,\n      isPatternRecognizerReady: false\n    };\n  }\n}